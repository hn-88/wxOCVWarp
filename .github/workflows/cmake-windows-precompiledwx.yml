# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake build on Windows with precompiled wxwidgets

on: workflow_dispatch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  WXWIN: C:/wxWidgets-3.1.2
  # assuming the setup.exe installs to this directory as per logs "deployed to"
  WXLIB: C:/wxWidgets-3.1.2/include
  WXINCLUDEDIR: C:/wxWidgets-3.1.2/lib/vc14x_x64_dll
  ARCH: x64

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install OpenCV
      # We're using chocolatey's default opencv build, since that should be sufficient.
      run: |
        # Choco install OpenCV -y

    - name: Install wxWidgets
      # Choco default installs https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.2/wxMSW-3.1.2-Setup.exe
      run: |
        # https://docs.wxwidgets.org/3.2.1/plat_msw_binaries.html 
        choco install wxwidgets -y  
        # https://lebao3105.github.io/content/tutorials/wxWidgets_WindowsCmake.html
        # https://stackoverflow.com/questions/61858388/how-do-i-set-an-enviroment-variable-in-github-action-on-a-windows-server
        # https://stackoverflow.com/questions/66733076/github-actions-set-environment-variable-for-windows-build-with-powershell
        # https://stackoverflow.com/questions/45226775/cmake-how-to-specify-target-platform       
        
                
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G"Visual Studio 17 2022" -B ${{github.workspace}}/build -DwxWidgets_ROOT_DIR=${{env.WXWIN}} -DwxWidgets_LIBRARIES=${{env.WXLIB}} -DwxWidgets_INCLUDE_DIRS=${{env.WXINCLUDEDIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}



    - name: Upload AppImage Artifact
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: wxOCVWarp-executable
        # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: build/Release
      
  
